version: 2.1 # use CircleCI 2.1
orbs:
  codecov: codecov/codecov@4.0.1
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # Updated Go image with Go 1.21+ support for generics
      - image: cimg/go:1.21
        environment:
          GO111MODULE: "on"
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
    # directory where steps are run - updated for v2 module
    working_directory: ~/project

    environment: # environment variables for the build itself
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: mkdir -p $TEST_RESULTS # create the test results directory

      - restore_cache: # restores saved cache if no changes are detected since last run
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - v2-pkg-cache-{{ checksum "go.sum" }}
            - v2-pkg-cache-

      # Install go-junit-report for test reporting
      - run: go install github.com/jstemmer/go-junit-report/v2@latest

      # Download dependencies
      - run:
          name: Download dependencies
          command: go mod download

      # Verify dependencies and format
      - run:
          name: Verify and format code
          command: |
            go mod verify
            go fmt ./...

      # Run tests with our test runner
      - run:
          name: Run unit tests
          command: |
            # Use our test-runner.sh if available, otherwise use go test directly
            if [ -f "./test-runner.sh" ]; then
              chmod +x ./test-runner.sh
              ./test-runner.sh -v -c
            else
              go test -v -race ./... | tee ${TEST_RESULTS}/go-test.out
            fi

      # Generate JUnit report if go test output exists
      - run:
          name: Generate JUnit report
          command: |
            if [ -f "${TEST_RESULTS}/go-test.out" ]; then
              cat ${TEST_RESULTS}/go-test.out | go-junit-report > ${TEST_RESULTS}/go-test-report.xml
            fi
          when: always

      # Run coverage separately to ensure we get the file
      - run:
          name: Run code coverage
          command: |
            go test -race -coverprofile=coverage.txt -covermode=atomic ./...
            if [ -f "coverage.txt" ]; then
              cp coverage.txt ${TEST_RESULTS}/coverage.txt
            fi

      # Build the project to verify everything compiles
      - run:
          name: Build project
          command: |
            if [ -f "Makefile" ]; then
              make build-native
            else
              go build ./...
            fi

      - save_cache: # Store cache in the /go/pkg directory
          key: v2-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/go/pkg"

      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: /tmp/test-results

      - codecov/upload:
          file: /tmp/test-results/coverage.txt
